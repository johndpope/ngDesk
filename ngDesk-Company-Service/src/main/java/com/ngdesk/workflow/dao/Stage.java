package com.ngdesk.workflow.dao;

import java.util.List;

import javax.validation.Valid;
import javax.validation.constraints.Size;

import org.springframework.data.mongodb.core.mapping.Field;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.ngdesk.commons.annotations.CustomNotEmpty;
import com.ngdesk.commons.annotations.CustomNotNull;

import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.media.Schema.AccessMode;

public class Stage {

	@Schema(required = false, accessMode = AccessMode.READ_ONLY, description = "Autogenerated Id")
	@JsonProperty("STAGE_ID")
	@Field("STAGE_ID")
	private String id;

	@Schema(description = "Name of the stage", required = true, example = "Check Permisions")
	@Field("NAME")
	@JsonProperty("NAME")
	@CustomNotEmpty(message = "DAO_VARIABLE_REQUIRED", values = { "STAGE_NAME" })
	private String name;

	@Schema(description = "Conditions evaluated for stages", required = true)
	@JsonProperty("CONDITIONS")
	@Field("CONDITIONS")
	@CustomNotNull(message = "NOT_NULL", values = { "STAGE_CONDITIONS" })
	@Size(max = 99, message = "CONDITIONS_LIMIT_REACHED")
	@Valid
	List<Condition> conditions;

	@Schema(description = "Different type of actions", required = true)
	@JsonProperty("NODES")
	@Field("NODES")
	@CustomNotNull(message = "NOT_NULL", values = { "STAGE_NODES" })
	@Size(min = 1, message = "NODES_REQUIRED")
	@Size(max = 99, message = "NODES_LIMIT_REACHED")
	@Valid
	List<Node> nodes;

	public Stage() {

	}

	public Stage(String id, String name,
			@Size(max = 99, message = "CONDITIONS_LIMIT_REACHED") @Valid List<Condition> conditions,
			@Size(min = 1, message = "NODES_REQUIRED") @Size(max = 99, message = "NODES_LIMIT_REACHED") @Valid List<Node> nodes) {
		super();
		this.id = id;
		this.name = name;
		this.conditions = conditions;
		this.nodes = nodes;
	}

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public List<Condition> getConditions() {
		return conditions;
	}

	public void setConditions(List<Condition> conditions) {
		this.conditions = conditions;
	}

	public List<Node> getNodes() {
		return nodes;
	}

	public void setNodes(List<Node> nodes) {
		this.nodes = nodes;
	}

}
