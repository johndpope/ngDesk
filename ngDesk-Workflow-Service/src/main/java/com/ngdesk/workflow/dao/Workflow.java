package com.ngdesk.workflow.dao;

import java.util.Date;
import java.util.List;

import javax.validation.Valid;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Field;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.ngdesk.commons.annotations.CustomNotEmpty;
import com.ngdesk.commons.annotations.CustomNotNull;

import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.media.Schema.AccessMode;

public class Workflow {

	@Schema(required = false, accessMode = AccessMode.READ_ONLY, description = "Autogenerated Id")
	@Id
	@JsonProperty("WORKFLOW_ID")
	private String id;

	@Schema(required = false, accessMode = AccessMode.READ_ONLY, description = "module id of the module to which the workflow belongs to")
	@JsonProperty("MODULE_ID")
	@Field("MODULE_ID")
	private String moduleId;

	@Schema(required = false, accessMode = AccessMode.READ_ONLY, description = "company id of the company to which the workflow belongs to")
	@JsonProperty("COMPANY_ID")
	@Field("COMPANY_ID")
	private String companyId;

	@Schema(required = true, description = "Type determines when the workflow should be executed")
	@Field("TYPE")
	@JsonProperty("TYPE")
	@CustomNotEmpty(message = "DAO_VARIABLE_REQUIRED", values = { "WORKFLOW_TYPE" })
    @Pattern(regexp = "CREATE|UPDATE|DELETE|CREATE_OR_UPDATE|BUTTON|SLA|FORM_OR_CATALOGUE", message = "INVALID_WORKFLOW_TYPE")
	private String type;

	@Schema(description = "Name of the workflow", required = true, example = "Send Confirmation")
	@Field("NAME")
	@JsonProperty("NAME")
	@CustomNotEmpty(message = "DAO_VARIABLE_REQUIRED", values = { "WORKFLOW_NAME" })
	private String name;

	@Schema(description = "Description of the workflow", required = false, example = "Workflow to send confirmation emails")
	@JsonProperty("DESCRIPTION")
	@Field("DESCRIPTION")
	private String description;

	@Schema(description = "Conditions evaluated for stages", required = true)
	@JsonProperty("CONDITIONS")
	@Field("CONDITIONS")
	@CustomNotNull(message = "NOT_NULL", values = { "WORKFLOW_CONDITIONS" })
	@Size(max = 99, message = "CONDITIONS_LIMIT_REACHED")
	@Valid
	List<Condition> conditions;

	@Schema(description = "List of stages executed", required = true)
	@JsonProperty("STAGES")
	@Field("STAGES")
	@CustomNotNull(message = "NOT_NULL", values = { "WORKFLOW_STAGES" })
	@Size(min = 1, message = "STAGES_REQUIRED")
	@Size(max = 99, message = "STAGES_LIMIT_REACHED")
	@Valid
	private List<Stage> stages;

	@Schema(description = "Order of execution of workflow", required = true)
	@JsonProperty("ORDER")
	@Field("ORDER")
	@CustomNotNull(message = "NOT_NULL", values = { "WORKFLOW_ORDER" })
	private Integer order;

	@Schema(description = "Date Created", required = false, accessMode = AccessMode.READ_ONLY)
	@JsonProperty("DATE_CREATED")
	@Field("DATE_CREATED")
	@JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'")
	private Date dateCreated;

	@Schema(description = "Date Updated", required = false, accessMode = AccessMode.READ_ONLY)
	@JsonProperty("DATE_UPDATED")
	@Field("DATE_UPDATED")
	@JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'")
	private Date dateUpdated;

	@Schema(description = "Last Updated By", required = false, accessMode = AccessMode.READ_ONLY)
	@JsonProperty("LAST_UPDATED_BY")
	@Field("LAST_UPDATED_BY")
	private String lastUpdated;

	@Schema(description = "Created By", required = false, accessMode = AccessMode.READ_ONLY)
	@JsonProperty("CREATED_BY")
	@Field("CREATED_BY")
	private String createdBy;

	@Schema(description = "Structure for rendering the UI", required = false)
	@JsonProperty("RAPID_UI_PAYLOAD")
	@Field("RAPID_UI_PAYLOAD")
	private String rapidUiPayload;

	@Schema(description = "Display On Entry", required = false)
	@JsonProperty("DISPLAY_ON_ENTRY")
	@Field("DISPLAY_ON_ENTRY")
	private boolean displayOnEntry;

	public Workflow() {

	}

	public Workflow(String id, String moduleId, String companyId,
			@Pattern(regexp = "CREATE|UPDATE|DELETE|CREATE_OR_UPDATE|BUTTON", message = "INVALID_WORKFLOW_TYPE") String type,
			String name, String description,
			@Size(max = 99, message = "CONDITIONS_LIMIT_REACHED") @Valid List<Condition> conditions,
			@Size(min = 1, message = "STAGES_REQUIRED") @Size(max = 99, message = "STAGES_LIMIT_REACHED") @Valid List<Stage> stages,
			Integer order, Date dateCreated, Date dateUpdated, String lastUpdated, String createdBy,
			String rapidUiPayload, boolean displayOnEntry) {
		super();
		this.id = id;
		this.moduleId = moduleId;
		this.companyId = companyId;
		this.type = type;
		this.name = name;
		this.description = description;
		this.conditions = conditions;
		this.stages = stages;
		this.order = order;
		this.dateCreated = dateCreated;
		this.dateUpdated = dateUpdated;
		this.lastUpdated = lastUpdated;
		this.createdBy = createdBy;
		this.rapidUiPayload = rapidUiPayload;
		this.displayOnEntry = displayOnEntry;
	}

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public String getModuleId() {
		return moduleId;
	}

	public void setModuleId(String moduleId) {
		this.moduleId = moduleId;
	}

	public String getCompanyId() {
		return companyId;
	}

	public void setCompanyId(String companyId) {
		this.companyId = companyId;
	}

	public String getType() {
		return type;
	}

	public void setType(String type) {
		this.type = type;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public List<Condition> getConditions() {
		return conditions;
	}

	public void setConditions(List<Condition> conditions) {
		this.conditions = conditions;
	}

	public List<Stage> getStages() {
		return stages;
	}

	public void setStages(List<Stage> stages) {
		this.stages = stages;
	}

	public Integer getOrder() {
		return order;
	}

	public void setOrder(Integer order) {
		this.order = order;
	}

	public Date getDateCreated() {
		return dateCreated;
	}

	public void setDateCreated(Date dateCreated) {
		this.dateCreated = dateCreated;
	}

	public Date getDateUpdated() {
		return dateUpdated;
	}

	public void setDateUpdated(Date dateUpdated) {
		this.dateUpdated = dateUpdated;
	}

	public String getLastUpdated() {
		return lastUpdated;
	}

	public void setLastUpdated(String lastUpdated) {
		this.lastUpdated = lastUpdated;
	}

	public String getCreatedBy() {
		return createdBy;
	}

	public void setCreatedBy(String createdBy) {
		this.createdBy = createdBy;
	}

	public String getRapidUiPayload() {
		return rapidUiPayload;
	}

	public void setRapidUiPayload(String rapidUiPayload) {
		this.rapidUiPayload = rapidUiPayload;
	}

	public boolean isDisplayOnEntry() {
		return displayOnEntry;
	}

	public void setDisplayOnEntry(boolean displayOnEntry) {
		this.displayOnEntry = displayOnEntry;
	}

}