package com.ngdesk.module.slas.dao;

import java.util.Date;
import java.util.List;

import javax.validation.Valid;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;

import org.springframework.data.annotation.Id;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.google.errorprone.annotations.MustBeClosed;
import com.ngdesk.commons.annotations.CustomNotEmpty;

import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.media.Schema.AccessMode;

public class SLA {

	@Schema(required = false, accessMode = AccessMode.READ_ONLY, description = "Autogenerated Id")
	@Id
	private String slaId;

	@Schema(description = "Company Id", required = false, accessMode = AccessMode.READ_ONLY)
	private String companyId;

	@Schema(description = "Module Id", required = false, accessMode = AccessMode.READ_ONLY)
	private String moduleId;

	@Schema(description = "SLA Name", required = true)
	@CustomNotEmpty(message = "DAO_VARIABLE_REQUIRED", values = "SLA_NAME")
	@Pattern(regexp = "^[a-zA-Z0-9_ ]*$", message = "INVALID_SLA_NAME")
	private String name;

	@Schema(description = "Description", required = false)
	private String description;

	@Schema(description = "Conditions", required = false)
	@Valid
	private List<SLAConditions> conditions;

	@Schema(description = "Violation", required = true)
	@Valid
	@CustomNotEmpty(message = "DAO_VARIABLE_REQUIRED", values = "VIOLATION")
	private Violation violation;

	@Schema(description = "SLA Expiry", required = true)
	private Integer slaExpiry;

	@Schema(description = "IS SLA Recurring", required = false)
	private Boolean isRecurring;

	@Schema(description = "recurrence", required = false)
	private Recurrence recurrence;

	@Schema(description = "Is SLA restricted", required = false)
	private Boolean isRestricted;

	@Schema(description = "Business Rules", required = false)
	private SLABusinessRules businessRules;

	@Schema(description = "Workflow Id of workflow executed when the SLA is violated", required = true)
	private String workflow;

	@Schema(description = "Date Created", required = false, accessMode = AccessMode.READ_ONLY)
	private Date dateCreated;

	@Schema(description = "Date Updated", required = false, accessMode = AccessMode.READ_ONLY)
	private Date dateUpdated;

	@Schema(description = "Last Updated By", required = false, accessMode = AccessMode.READ_ONLY)
	private String lastUpdatedBy;

	@Schema(description = "Created By", required = false, accessMode = AccessMode.READ_ONLY)
	private String createdBy;

	@Schema(description = "Deleted", required = false)
	private Boolean deleted;

	public SLA() {

	}

	public SLA(String slaId, String companyId, String moduleId, String name, String description,
			@Valid List<SLAConditions> conditions, @Valid Violation violation, Integer slaExpiry, Boolean isRecurring,
			Recurrence recurrence, Boolean isRestricted, SLABusinessRules businessRules, String workflow,
			Date dateCreated, Date dateUpdated, String lastUpdatedBy, String createdBy, Boolean deleted) {
		super();
		this.slaId = slaId;
		this.companyId = companyId;
		this.moduleId = moduleId;
		this.name = name;
		this.description = description;
		this.conditions = conditions;
		this.violation = violation;
		this.slaExpiry = slaExpiry;
		this.isRecurring = isRecurring;
		this.recurrence = recurrence;
		this.isRestricted = isRestricted;
		this.businessRules = businessRules;
		this.workflow = workflow;
		this.dateCreated = dateCreated;
		this.dateUpdated = dateUpdated;
		this.lastUpdatedBy = lastUpdatedBy;
		this.createdBy = createdBy;
		this.deleted = deleted;
	}

	public String getSlaId() {
		return slaId;
	}

	public void setSlaId(String slaId) {
		this.slaId = slaId;
	}

	public String getCompanyId() {
		return companyId;
	}

	public void setCompanyId(String companyId) {
		this.companyId = companyId;
	}

	public String getModuleId() {
		return moduleId;
	}

	public void setModuleId(String moduleId) {
		this.moduleId = moduleId;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public List<SLAConditions> getConditions() {
		return conditions;
	}

	public void setConditions(List<SLAConditions> conditions) {
		this.conditions = conditions;
	}

	public Violation getViolation() {
		return violation;
	}

	public void setViolation(Violation violation) {
		this.violation = violation;
	}

	public Integer getSlaExpiry() {
		return slaExpiry;
	}

	public void setSlaExpiry(Integer slaExpiry) {
		this.slaExpiry = slaExpiry;
	}

	public Boolean getIsRecurring() {
		return isRecurring;
	}

	public void setIsRecurring(Boolean isRecurring) {
		this.isRecurring = isRecurring;
	}

	public Recurrence getRecurrence() {
		return recurrence;
	}

	public void setRecurrence(Recurrence recurrence) {
		this.recurrence = recurrence;
	}

	public Boolean getIsRestricted() {
		return isRestricted;
	}

	public void setIsRestricted(Boolean isRestricted) {
		this.isRestricted = isRestricted;
	}

	public SLABusinessRules getBusinessRules() {
		return businessRules;
	}

	public void setBusinessRules(SLABusinessRules businessRules) {
		this.businessRules = businessRules;
	}

	public String getWorkflow() {
		return workflow;
	}

	public void setWorkflow(String workflow) {
		this.workflow = workflow;
	}

	public Date getDateCreated() {
		return dateCreated;
	}

	public void setDateCreated(Date dateCreated) {
		this.dateCreated = dateCreated;
	}

	public Date getDateUpdated() {
		return dateUpdated;
	}

	public void setDateUpdated(Date dateUpdated) {
		this.dateUpdated = dateUpdated;
	}

	public String getLastUpdatedBy() {
		return lastUpdatedBy;
	}

	public void setLastUpdatedBy(String lastUpdatedBy) {
		this.lastUpdatedBy = lastUpdatedBy;
	}

	public String getCreatedBy() {
		return createdBy;
	}

	public void setCreatedBy(String createdBy) {
		this.createdBy = createdBy;
	}

	public Boolean getDeleted() {
		return deleted;
	}

	public void setDeleted(Boolean deleted) {
		this.deleted = deleted;
	}

}
